{"map":"{\"version\":3,\"sources\":[\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/src/parser.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/src/utils.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/src/api/nodeApi.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/src/config.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/src/api/getAccountHistory.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/bitshares-report/es/index.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/query-string/index.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/strict-uri-encode/index.js\",\"/home/citshares/work/UI/bitshares-ui/node_modules/decode-uri-component/index.js\"],\"names\":[\"moment\",\"__webpack_require__\",\"utils\",\"assetMovements\",\"runningBalance\",\"movementTypes\",\"trackMovements\",\"asset\",\"amount\",\"type\",\"timestamp\",\"push\",\"Date\",\"deposit\",\"withdrawal\",\"addOutputEntry\",\"output\",\"buy\",\"sell\",\"fee\",\"date\",\"opType\",\"comment\",\"tradeGroup\",\"currency\",\"printAmount\",\"module\",\"exports\",\"parseData\",\"recordData\",\"accountId\",\"accountName\",\"out\",\"typeCounts\",\"incrementType\",\"_iterator\",\"Object\",\"keys\",\"_isArray\",\"Array\",\"isArray\",\"_i\",\"Symbol\",\"iterator\",\"_ref\",\"length\",\"next\",\"done\",\"value\",\"_recordData$trx_id\",\"data\",\"vestingFunds\",\"parseCurrency\",\"owner\",\"total_claimed\",\"funds\",\"to\",\"from\",\"soldFunds\",\"pays\",\"boughtFunds\",\"receives\",\"issuedFunds\",\"asset_to_issue\",\"issuer\",\"issue_to_account\",\"registrar\",\"asset_id\",\"console\",\"log\",\"filterEntries\",\"entries\",\"FILTER_TYPE\",\"FILTER_DATE\",\"entriesKeys\",\"i\",\"trx_id\",\"_entries$trx_id\",\"getTime\",\"groupEntries\",\"previous_fill\",\"recordKeys\",\"_entries$trx_id2\",\"t1\",\"marketId\",\"previous\",\"t0\",\"isSame\",\"parseInt\",\"ChainStore\",\"getAsset\",\"precisionRatio\",\"p\",\"Error\",\"Math\",\"pow\",\"precisionToRatio\",\"toJS\",\"precision\",\"symbol\",\"toFixed\",\"getIndex\",\"str\",\"pieces\",\"split\",\"config\",\"bts\",\"_require\",\"ChainTypes\",\"FetchChain\",\"operations\",\"ops\",\"blockData\",\"assetData\",\"getBlockTime\",\"block\",\"Promise\",\"resolve\",\"reject\",\"Apis\",\"instance\",\"db_api\",\"exec\",\"then\",\"result\",\"catch\",\"getAssetData\",\"_FetchChain2\",\"undefined\",\"a\",\"replace\",\"err\",\"connect\",\"apiNode\",\"init_promise\",\"res\",\"init\",\"error\",\"disconnect\",\"close\",\"getUser\",\"name\",\"_FetchChain\",\"account\",\"balances\",\"call_orders\",\"assets\",\"id\",\"resolveAssets\",\"list\",\"promises\",\"forEach\",\"record\",\"op\",\"entry\",\"all\",\"resolveBlockTimes\",\"map\",\"block_time\",\"block_num\",\"getBlock\",\"useES\",\"esNode\",\"botPaymentAccounts\",\"fetchClient\",\"isBrowser\",\"fetch\",\"getAccountHistory\",\"account_id\",\"stop\",\"limit\",\"start\",\"history_api\",\"getAccountHistoryES\",\"arguments\",\"json\",\"r\",\"account_history\",\"operation_id\",\"JSON\",\"parse\",\"operation_history\",\"operation_result\",\"block_data\",\"_require2\",\"_require3\",\"strictUriEncode\",\"decodeComponent\",\"encode\",\"options\",\"strict\",\"encodeURIComponent\",\"decode\",\"extract\",\"input\",\"queryStart\",\"indexOf\",\"slice\",\"formatter\",\"arrayFormat\",\"key\",\"accumulator\",\"concat\",\"parserForArrayFormat\",\"assign\",\"ret\",\"create\",\"trim\",\"param\",\"sort\",\"reduce\",\"Boolean\",\"keysSorter\",\"b\",\"Number\",\"stringify\",\"obj\",\"index\",\"join\",\"encoderForArrayFormat\",\"value2\",\"filter\",\"x\",\"parseUrl\",\"url\",\"query\",\"charCodeAt\",\"toString\",\"toUpperCase\",\"singleMatcher\",\"RegExp\",\"multiMatcher\",\"decodeComponents\",\"components\",\"decodeURIComponent\",\"left\",\"right\",\"prototype\",\"call\",\"tokens\",\"match\",\"encodedURI\",\"TypeError\",\"replaceMap\",\"%FE%FF\",\"%FF%FE\",\"customDecodeURIComponent\"],\"mappings\":\"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\",\"sourcesContent\":[\"var moment = require(\\\"moment\\\");\\nvar utils = require(\\\"./utils\\\");\\n\\nvar assetMovements = {};\\nvar runningBalance = {};\\nvar movementTypes = {};\\nvar accountBalances = {};\\nvar transfers = {};\\nvar fills = {};\\n\\nfunction getFinalBalance(asset) {\\n    var sum = 0;\\n    if (!assetMovements[asset]) return 0;\\n    assetMovements[asset].forEach(function(movement) {\\n        sum += movement;\\n    });\\n    return sum;\\n}\\n\\nfunction trackMovements(asset, amount, type, timestamp) {\\n    if (!assetMovements[asset]) assetMovements[asset] = [];\\n    if (!runningBalance[asset]) runningBalance[asset] = [];\\n\\n    assetMovements[asset].push(amount);\\n    runningBalance[asset].push([type, amount, new Date(timestamp)]);\\n\\n    if (!movementTypes[asset]) movementTypes[asset] = {};\\n    if (!movementTypes[asset][type])\\n        movementTypes[asset][type] = {deposit: [], withdrawal: []};\\n\\n    movementTypes[asset][type][amount > 0 ? \\\"deposit\\\" : \\\"withdrawal\\\"].push(\\n        amount\\n    );\\n}\\n\\nfunction addOutputEntry(\\n    output,\\n    type,\\n    buy,\\n    sell,\\n    fee,\\n    date,\\n    opType,\\n    comment,\\n    tradeGroup\\n) {\\n    if (!buy) buy = {amount: \\\"\\\", currency: \\\"\\\"};\\n    if (!sell) sell = {amount: \\\"\\\", currency: \\\"\\\"};\\n    if (!fee) fee = {amount: \\\"\\\", currency: \\\"\\\"};\\n\\n    if (buy.amount) trackMovements(buy.currency, buy.amount, opType, date);\\n    if (sell.amount) trackMovements(sell.currency, -sell.amount, opType, date);\\n    if (fee.amount) trackMovements(fee.currency, -fee.amount, opType, date);\\n\\n    output.push([\\n        type,\\n        utils.printAmount(buy),\\n        buy.currency,\\n        utils.printAmount(sell),\\n        sell.currency,\\n        utils.printAmount(fee),\\n        fee.currency,\\n        \\\"BTS-DEX\\\",\\n        tradeGroup || \\\"\\\",\\n        comment || \\\"\\\",\\n        date\\n    ]);\\n\\n    return output;\\n}\\n\\nfunction filterEntries(entries, FILTER_TYPE, FILTER_DATE) {\\n    if (!FILTER_TYPE && !FILTER_DATE) return entries;\\n    var entriesKeys = Object.keys(entries);\\n    for (var i = entriesKeys.length - 1; i >= 0; i--) {\\n        var trx_id = entriesKeys[i];\\n        var _entries$trx_id = entries[trx_id],\\n            timestamp = _entries$trx_id.timestamp,\\n            type = _entries$trx_id.type,\\n            data = _entries$trx_id.data;\\n\\n        if (!!FILTER_TYPE) {\\n            if (type !== FILTER_TYPE) {\\n                delete entries[trx_id];\\n                continue;\\n            }\\n        }\\n\\n        if (!!FILTER_DATE) {\\n            if (new Date(timestamp).getTime() < FILTER_DATE) {\\n                delete entries[trx_id];\\n                continue;\\n            }\\n        }\\n    }\\n    console.log(\\n        \\\"Removed \\\" +\\n            (entriesKeys.length - Object.keys(entries).length) +\\n            \\\" entries by filtering\\\"\\n    );\\n    return entries;\\n}\\n\\nfunction groupEntries(entries) {\\n    var previous_fill = {};\\n    var recordKeys = Object.keys(entries);\\n    for (var i = recordKeys.length - 1; i >= 0; i--) {\\n        var trx_id = recordKeys[i];\\n        var _entries$trx_id2 = entries[trx_id],\\n            timestamp = _entries$trx_id2.timestamp,\\n            type = _entries$trx_id2.type,\\n            data = _entries$trx_id2.data;\\n\\n        switch (type) {\\n            case \\\"fill_order\\\":\\n                var t1 = moment(timestamp);\\n                var marketId =\\n                    data.receives.asset_id + \\\"_\\\" + data.pays.asset_id;\\n                var previous = previous_fill[marketId];\\n                var t0 = !!previous ? moment(previous.timestamp) : null;\\n\\n                if (\\n                    !!previous &&\\n                    t1.isSame(t0, \\\"day\\\") &&\\n                    previous.data.pays.asset_id === data.pays.asset_id &&\\n                    previous.data.receives.asset_id === data.receives.asset_id\\n                ) {\\n                    data.pays.amount =\\n                        parseInt(data.pays.amount, 10) +\\n                        parseInt(previous.data.pays.amount, 10);\\n                    data.receives.amount =\\n                        parseInt(data.receives.amount, 10) +\\n                        parseInt(previous.data.receives.amount, 10);\\n                    data.fee.amount =\\n                        parseInt(data.fee.amount, 10) +\\n                        parseInt(previous.data.fee.amount, 10);\\n                    entries[trx_id].data = data;\\n                    delete entries[previous.trx_id];\\n                }\\n                previous_fill[marketId] = {\\n                    data: data,\\n                    timestamp: timestamp,\\n                    trx_id: trx_id\\n                };\\n                break;\\n\\n            default:\\n                break;\\n        }\\n    }\\n    console.log(\\n        \\\"Removed \\\" +\\n            (recordKeys.length - Object.keys(entries).length) +\\n            \\\" fill_order entries by grouping\\\"\\n    );\\n    return entries;\\n}\\n\\nfunction parseData(recordData, accountId, accountName) {\\n    var out = [];\\n    out.push([\\n        \\\"Type\\\",\\n        \\\"Buy Amount\\\",\\n        \\\"Buy Currency\\\",\\n        \\\"Sell Amount\\\",\\n        \\\"Sell Currency\\\",\\n        \\\"Fee Amount\\\",\\n        \\\"Fee Currency\\\",\\n        \\\"Exchange\\\",\\n        \\\"Trade Group\\\",\\n        \\\"Comment\\\",\\n        \\\"Date\\\"\\n    ]);\\n\\n    var typeCounts = {};\\n\\n    function incrementType(type) {\\n        if (!typeCounts[type]) typeCounts[type] = 0;\\n        typeCounts[type]++;\\n    }\\n\\n    for (\\n        var _iterator = Object.keys(recordData),\\n            _isArray = Array.isArray(_iterator),\\n            _i = 0,\\n            _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();\\n        ;\\n\\n    ) {\\n        var _ref;\\n\\n        if (_isArray) {\\n            if (_i >= _iterator.length) break;\\n            _ref = _iterator[_i++];\\n        } else {\\n            _i = _iterator.next();\\n            if (_i.done) break;\\n            _ref = _i.value;\\n        }\\n\\n        var trx_id = _ref;\\n        var _recordData$trx_id = recordData[trx_id],\\n            timestamp = _recordData$trx_id.timestamp,\\n            type = _recordData$trx_id.type,\\n            data = _recordData$trx_id.data;\\n\\n        var fee = null;\\n\\n        switch (type) {\\n            case \\\"vesting_balance_withdraw\\\":\\n                var vestingFunds = utils.parseCurrency(data.amount);\\n                fee = utils.parseCurrency(data.fee);\\n\\n                out = addOutputEntry(\\n                    out,\\n                    data.owner === \\\"1.2.30665\\\" && vestingFunds.amount > 10000\\n                        ? \\\"Income\\\"\\n                        : \\\"Deposit\\\",\\n                    vestingFunds,\\n                    null,\\n                    fee, // dev.bitsharesblocks\\n                    timestamp,\\n                    type,\\n                    accountName + \\\" : Vesting balance withdraw\\\"\\n                );\\n                incrementType(type);\\n                break;\\n\\n            case \\\"balance_claim\\\":\\n                var balanceClaimFunds = utils.parseCurrency(data.total_claimed);\\n\\n                out = addOutputEntry(\\n                    out,\\n                    \\\"Deposit\\\",\\n                    balanceClaimFunds,\\n                    null,\\n                    null,\\n                    timestamp,\\n                    type,\\n                    accountName + \\\" : Balance claim\\\"\\n                );\\n\\n                incrementType(type);\\n                break;\\n\\n            case \\\"transfer\\\":\\n                var funds = utils.parseCurrency(data.amount);\\n                fee = utils.parseCurrency(data.fee);\\n                if (data.to == accountId) {\\n                    // Funds coming in to the account\\n                    out = addOutputEntry(\\n                        out,\\n                        data.to === \\\"1.2.391938\\\" && data.from === \\\"1.2.381086\\\"\\n                            ? \\\"Income\\\"\\n                            : \\\"Deposit\\\",\\n                        funds,\\n                        null,\\n                        null, // pay.svk and bitshares-ui\\n                        timestamp,\\n                        type,\\n                        accountName + \\\" : From \\\" + data.from\\n                    );\\n                } else {\\n                    out = addOutputEntry(\\n                        out,\\n                        \\\"Withdrawal\\\",\\n                        null,\\n                        funds,\\n                        fee,\\n                        timestamp,\\n                        type,\\n                        accountName + \\\": To \\\" + data.to\\n                    );\\n                }\\n                incrementType(type);\\n                break;\\n\\n            case \\\"fill_order\\\":\\n                var soldFunds = utils.parseCurrency(data.pays);\\n                var boughtFunds = utils.parseCurrency(data.receives);\\n                fee = utils.parseCurrency(data.fee);\\n                if (fee.currency !== \\\"BTS\\\") {\\n                    if (boughtFunds.currency === fee.currency) {\\n                        boughtFunds.amount -= fee.amount;\\n                        fee.amount = 0;\\n                    } else if (soldFunds.currency === fee.currency) {\\n                        soldFunds.amount -= fee.amount;\\n                        fee.amount = 0;\\n                    }\\n                }\\n\\n                out = addOutputEntry(\\n                    out,\\n                    \\\"Trade\\\",\\n                    boughtFunds,\\n                    soldFunds,\\n                    fee,\\n                    timestamp,\\n                    type\\n                );\\n\\n                incrementType(type);\\n                break;\\n\\n            case \\\"asset_issue\\\": {\\n                var issuedFunds = utils.parseCurrency(data.asset_to_issue);\\n                fee =\\n                    data.issuer === accountId\\n                        ? utils.parseCurrency(data.fee)\\n                        : null;\\n                if (data.issue_to_account === accountId) {\\n                    out = addOutputEntry(\\n                        out,\\n                        \\\"Deposit\\\",\\n                        issuedFunds,\\n                        null,\\n                        fee,\\n                        timestamp,\\n                        type,\\n                        accountName + \\\" : Issued to account\\\"\\n                    );\\n                }\\n                incrementType(type);\\n                break;\\n            }\\n\\n            case \\\"account_update\\\":\\n            case \\\"proposal_create\\\":\\n            case \\\"proposal_update\\\":\\n            case \\\"account_whitelist\\\":\\n            case \\\"worker_create\\\":\\n            case \\\"limit_order_create\\\":\\n            case \\\"limit_order_cancel\\\":\\n            case \\\"call_order_update\\\":\\n                fee = utils.parseCurrency(data.fee);\\n                if (fee.amount > 0) {\\n                    out = addOutputEntry(\\n                        out,\\n                        \\\"Withdrawal\\\",\\n                        null,\\n                        fee,\\n                        null,\\n                        timestamp,\\n                        type,\\n                        type + \\\" fee\\\"\\n                    );\\n                    incrementType(type);\\n                }\\n                break;\\n\\n            case \\\"account_create\\\":\\n                if (data.registrar === accountId) {\\n                    fee = utils.parseCurrency(data.fee);\\n                    out = addOutputEntry(\\n                        out,\\n                        \\\"Withdrawal\\\",\\n                        null,\\n                        fee,\\n                        null,\\n                        timestamp,\\n                        type,\\n                        type + \\\" fee\\\"\\n                    );\\n                    incrementType(type);\\n                }\\n                break;\\n\\n            case \\\"asset_fund_fee_pool\\\": {\\n                fee = utils.parseCurrency(data.fee);\\n                var fundFunds = utils.parseCurrency({\\n                    amount: data.amount,\\n                    asset_id: \\\"1.3.0\\\"\\n                });\\n\\n                out = addOutputEntry(\\n                    out,\\n                    \\\"Withdrawal\\\",\\n                    null,\\n                    fundFunds,\\n                    fee,\\n                    timestamp,\\n                    type,\\n                    \\\"\\\" + type\\n                );\\n\\n                incrementType(type);\\n                break;\\n            }\\n\\n            default: {\\n                console.log(\\\"Unhandled type:\\\", type, data);\\n            }\\n        }\\n    }\\n    return out;\\n}\\n\\nmodule.exports = {\\n    parseData: parseData,\\n    filterEntries: filterEntries,\\n    groupEntries: groupEntries\\n};\\n\",\"var _require = require(\\\"bitsharesjs\\\"),\\n    ChainStore = _require.ChainStore;\\n\\nfunction precisionToRatio(p) {\\n    if (typeof p !== \\\"number\\\") throw new Error(\\\"Input must be a number\\\");\\n    return Math.pow(10, p);\\n}\\n\\nfunction parseCurrency(amount) {\\n    var asset = ChainStore.getAsset(amount.asset_id);\\n    if (asset) asset = asset.toJS();\\n    else {\\n        asset = {precision: 5};\\n    }\\n    var precisionRatio = precisionToRatio(asset.precision);\\n\\n    var fullAmount = amount.amount / precisionRatio;\\n    return {\\n        amount: fullAmount,\\n        currency: asset.symbol,\\n        asset_id: amount.asset_id\\n    };\\n}\\n\\nfunction printAmount(amount) {\\n    if (!amount.amount || !amount.currency) return \\\"\\\";\\n    var asset = ChainStore.getAsset(amount.asset_id);\\n    if (asset) asset = asset.toJS();\\n    else {\\n        asset = {precision: 5};\\n    }\\n\\n    return amount.amount.toFixed(asset.precision);\\n}\\n\\nfunction getIndex(str) {\\n    var pieces = str.split(\\\".\\\");\\n    return parseInt(pieces[2], 10);\\n}\\n\\nmodule.exports = {\\n    parseCurrency: parseCurrency,\\n    printAmount: printAmount,\\n    getIndex: getIndex\\n};\\n\",\"var config = require(\\\"../config\\\");\\nvar bts = require(\\\"bitsharesjs-ws\\\");\\n\\nvar _require = require(\\\"bitsharesjs\\\"),\\n    ChainTypes = _require.ChainTypes,\\n    ChainStore = _require.ChainStore,\\n    FetchChain = _require.FetchChain;\\n\\nvar operations = ChainTypes.operations;\\n\\nvar ops = Object.keys(operations);\\n\\nvar blockData = {};\\nvar assetData = {};\\n\\nfunction connect() {\\n    return new Promise(function(resolve) {\\n        bts.Apis.instance(config.apiNode, true)\\n            .init_promise.then(function(res) {\\n                ChainStore.init(false).then(function() {\\n                    resolve(res);\\n                });\\n            })\\n            .catch(function(err) {\\n                console.error(\\\"Error connection to node:\\\", err);\\n            });\\n    });\\n}\\n\\nfunction disconnect() {\\n    bts.Apis.instance().close();\\n}\\n\\nfunction getUser(name) {\\n    return new Promise(function(resolve, reject) {\\n        var _FetchChain;\\n\\n        FetchChain(\\n            \\\"getAccount\\\",\\n            name,\\n            undefined,\\n            ((_FetchChain = {}), (_FetchChain[name] = false), _FetchChain)\\n        )\\n            .then(function(result) {\\n                var account = result.toJS();\\n                if (!account.balances) account.balances = {};\\n                if (!account.call_orders) account.call_orders = [];\\n                var assets = Object.keys(account.balances);\\n\\n                // account.call_orders.forEach(c => {\\n                //     let balanceIndex = account.balances.findIndex(b => {\\n                //         return b.asset_type === c.call_price.base.asset_id;\\n                //     });\\n                //     if(balanceIndex !== -1) {\\n                //         let newBalance = parseInt(account.balances[balanceIndex].balance, 10) +\\n                //         parseInt(c.collateral, 10);\\n                //         account.balances[balanceIndex].balance = newBalance;\\n                //     } else {\\n                //         assets.push(c.call_price.base.asset_id);\\n                //         account.balances.push({\\n                //             balance: c.collateral,\\n                //             asset_type: c.call_price.base.asset_id\\n                //         });\\n                //     }\\n                // });\\n\\n                resolve({\\n                    accountId: account.id,\\n                    assets: assets,\\n                    balances: account.balances\\n                });\\n            })\\n            .catch(reject);\\n    });\\n}\\n\\nfunction getBlockTime(block) {\\n    return new Promise(function(resolve, reject) {\\n        if (blockData[block]) return resolve(blockData[block]);\\n\\n        bts.Apis.instance()\\n            .db_api()\\n            .exec(\\\"get_block\\\", [block])\\n            .then(function(result) {\\n                blockData[block] = new Date(result.timestamp + \\\"Z\\\");\\n                resolve(blockData[block]);\\n            })\\n            .catch(reject);\\n    });\\n}\\n\\nfunction getAssetData(asset) {\\n    return new Promise(function(resolve, reject) {\\n        var _FetchChain2;\\n\\n        if (assetData[asset]) return resolve(assetData[asset]);\\n\\n        FetchChain(\\n            \\\"getObject\\\",\\n            asset,\\n            undefined,\\n            ((_FetchChain2 = {}), (_FetchChain2[asset] = false), _FetchChain2)\\n        )\\n            .then(function(result) {\\n                var a = result.toJS();\\n                assetData[asset] = {\\n                    symbol: a.symbol.replace(\\n                        /OPEN\\\\.|BRIDGE\\\\.|RUDEX\\\\.|GDEX\\\\.|BLOCK\\\\./,\\n                        \\\"\\\"\\n                    ),\\n                    precision: a.precision\\n                };\\n                resolve(assetData[asset]);\\n            })\\n            .catch(function(err) {\\n                reject();\\n            });\\n    });\\n}\\n\\nfunction resolveBlockTimes(operations) {\\n    return new Promise(function(resolve, reject) {\\n        var promises = operations.map(function(op) {\\n            if (op.block_time)\\n                blockData[op.block_num] = new Date(op.block_time);\\n            return getBlockTime(op.block_num);\\n        });\\n        Promise.all(promises)\\n            .then(resolve)\\n            .catch(reject);\\n    });\\n}\\n\\nfunction resolveAssets(operations, list) {\\n    return new Promise(function(resolve, reject) {\\n        var promises = [];\\n        var assets = {};\\n        if (operations) {\\n            operations.forEach(function(record) {\\n                var type = ops[record.op[0]];\\n                switch (type) {\\n                    case \\\"transfer\\\": {\\n                        // console.log(\\\"transfer record.op:\\\", record.op);\\n                        assets[record.op[1].amount.asset_id] = true;\\n                        assets[record.op[1].fee.asset_id] = true;\\n                        break;\\n                    }\\n                    case \\\"fill_order\\\": {\\n                        assets[record.op[1].pays.asset_id] = true;\\n                        assets[record.op[1].receives.asset_id] = true;\\n                        assets[record.op[1].fee.asset_id] = true;\\n                        break;\\n                    }\\n                    case \\\"asset_issue\\\": {\\n                        assets[record.op[1].asset_to_issue.asset_id] = true;\\n                        assets[record.op[1].fee.asset_id] = true;\\n                        break;\\n                    }\\n                    default: {\\n                        break;\\n                    }\\n                }\\n            });\\n        }\\n\\n        if (list) {\\n            list.forEach(function(entry) {\\n                assets[entry] = true;\\n            });\\n        }\\n\\n        Object.keys(assets).forEach(function(asset_id) {\\n            if (!assetData[asset_id] && !!asset_id) {\\n                promises.push(getAssetData(asset_id));\\n            }\\n        });\\n        Promise.all(promises)\\n            .then(resolve)\\n            .catch(reject);\\n    });\\n}\\n\\nfunction getAsset(id) {\\n    return assetData[id];\\n}\\n\\nfunction getBlock(block_num) {\\n    return blockData[block_num];\\n}\\n\\nmodule.exports = {\\n    connect: connect,\\n    disconnect: disconnect,\\n    getUser: getUser,\\n    getBlockTime: getBlockTime,\\n    getAssetData: getAssetData,\\n    resolveAssets: resolveAssets,\\n    resolveBlockTimes: resolveBlockTimes,\\n    getAsset: getAsset,\\n    getBlock: getBlock\\n};\\n\",\"module.exports = {\\n    apiNode: \\\"wss://eu.nodes.bitshares.ws\\\", // wss://eu.nodes.bitshares.ws is an alternative\\n    useES: true, // use elastic search\\n    esNode: \\\"https://eswrapper.bitshares.eu\\\",\\n    botPaymentAccounts: []\\n};\\n\",\"var bts = require(\\\"bitsharesjs-ws\\\");\\nvar fetchClient = void 0;\\n\\nmodule.exports = function(isBrowser) {\\n    if (isBrowser) fetchClient = fetch;\\n    else {\\n        fetchClient = require(\\\"node-fetch\\\");\\n    }\\n\\n    function getAccountHistoryES(account_id, limit, start) {\\n        var esNode =\\n            arguments.length > 3 && arguments[3] !== undefined\\n                ? arguments[3]\\n                : \\\"https://eswrapper.bitshares.eu\\\";\\n\\n        console.log(\\n            \\\"query\\\",\\n            esNode +\\n                \\\"/get_account_history?account_id=\\\" +\\n                account_id +\\n                \\\"&from_=\\\" +\\n                start +\\n                \\\"&size=\\\" +\\n                limit +\\n                \\\"&sort_by=block_data.block_time&type=data&agg_field=operation_type\\\"\\n        );\\n        return new Promise(function(resolve, reject) {\\n            fetchClient(\\n                esNode +\\n                    \\\"/get_account_history?account_id=\\\" +\\n                    account_id +\\n                    \\\"&from_=\\\" +\\n                    start +\\n                    \\\"&size=\\\" +\\n                    limit +\\n                    \\\"&sort_by=block_data.block_time&type=data&agg_field=operation_type\\\"\\n            )\\n                .then(function(res) {\\n                    return res.json();\\n                })\\n                .then(function(result) {\\n                    var ops = result.map(function(r) {\\n                        return {\\n                            id: r.account_history.operation_id,\\n                            op: JSON.parse(r.operation_history.op),\\n                            result: JSON.parse(\\n                                r.operation_history.operation_result\\n                            ),\\n                            block_num: r.block_data.block_num,\\n                            block_time: r.block_data.block_time + \\\"Z\\\"\\n                        };\\n                    });\\n                    resolve(ops);\\n                })\\n                .catch(function() {\\n                    resolve([]);\\n                });\\n        });\\n    }\\n\\n    function getAccountHistory(account_id, stop, limit, start) {\\n        return new Promise(function(resolve, reject) {\\n            bts.Apis.instance()\\n                .history_api()\\n                .exec(\\\"get_account_history\\\", [account_id, stop, limit, start])\\n                .then(function(operations) {\\n                    resolve(operations);\\n                })\\n                .catch(reject);\\n        });\\n    }\\n\\n    return {\\n        getAccountHistory: getAccountHistory,\\n        getAccountHistoryES: getAccountHistoryES\\n    };\\n};\\n\",\"var _require = require(\\\"./src/parser\\\"),\\n    groupEntries = _require.groupEntries,\\n    parseData = _require.parseData;\\n\\nvar _require2 = require(\\\"./src/api/nodeApi\\\"),\\n    resolveBlockTimes = _require2.resolveBlockTimes,\\n    resolveAssets = _require2.resolveAssets;\\n\\nvar _require3 = require(\\\"./src/api/getAccountHistory\\\")(true),\\n    getAccountHistoryES = _require3.getAccountHistoryES,\\n    getAccountHistory = _require3.getAccountHistory;\\n\\nmodule.exports = {\\n    groupEntries: groupEntries,\\n    parseData: parseData,\\n    getAccountHistoryES: getAccountHistoryES,\\n    getAccountHistory: getAccountHistory,\\n    resolveBlockTimes: resolveBlockTimes,\\n    resolveAssets: resolveAssets\\n};\\n\",\"'use strict';\\nconst strictUriEncode = require('strict-uri-encode');\\nconst decodeComponent = require('decode-uri-component');\\n\\nfunction encoderForArrayFormat(options) {\\n\\tswitch (options.arrayFormat) {\\n\\t\\tcase 'index':\\n\\t\\t\\treturn (key, value, index) => {\\n\\t\\t\\t\\treturn value === null ? [\\n\\t\\t\\t\\t\\tencode(key, options),\\n\\t\\t\\t\\t\\t'[',\\n\\t\\t\\t\\t\\tindex,\\n\\t\\t\\t\\t\\t']'\\n\\t\\t\\t\\t].join('') : [\\n\\t\\t\\t\\t\\tencode(key, options),\\n\\t\\t\\t\\t\\t'[',\\n\\t\\t\\t\\t\\tencode(index, options),\\n\\t\\t\\t\\t\\t']=',\\n\\t\\t\\t\\t\\tencode(value, options)\\n\\t\\t\\t\\t].join('');\\n\\t\\t\\t};\\n\\t\\tcase 'bracket':\\n\\t\\t\\treturn (key, value) => {\\n\\t\\t\\t\\treturn value === null ? [encode(key, options), '[]'].join('') : [\\n\\t\\t\\t\\t\\tencode(key, options),\\n\\t\\t\\t\\t\\t'[]=',\\n\\t\\t\\t\\t\\tencode(value, options)\\n\\t\\t\\t\\t].join('');\\n\\t\\t\\t};\\n\\t\\tdefault:\\n\\t\\t\\treturn (key, value) => {\\n\\t\\t\\t\\treturn value === null ? encode(key, options) : [\\n\\t\\t\\t\\t\\tencode(key, options),\\n\\t\\t\\t\\t\\t'=',\\n\\t\\t\\t\\t\\tencode(value, options)\\n\\t\\t\\t\\t].join('');\\n\\t\\t\\t};\\n\\t}\\n}\\n\\nfunction parserForArrayFormat(options) {\\n\\tlet result;\\n\\n\\tswitch (options.arrayFormat) {\\n\\t\\tcase 'index':\\n\\t\\t\\treturn (key, value, accumulator) => {\\n\\t\\t\\t\\tresult = /\\\\[(\\\\d*)\\\\]$/.exec(key);\\n\\n\\t\\t\\t\\tkey = key.replace(/\\\\[\\\\d*\\\\]$/, '');\\n\\n\\t\\t\\t\\tif (!result) {\\n\\t\\t\\t\\t\\taccumulator[key] = value;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (accumulator[key] === undefined) {\\n\\t\\t\\t\\t\\taccumulator[key] = {};\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taccumulator[key][result[1]] = value;\\n\\t\\t\\t};\\n\\t\\tcase 'bracket':\\n\\t\\t\\treturn (key, value, accumulator) => {\\n\\t\\t\\t\\tresult = /(\\\\[\\\\])$/.exec(key);\\n\\t\\t\\t\\tkey = key.replace(/\\\\[\\\\]$/, '');\\n\\n\\t\\t\\t\\tif (!result) {\\n\\t\\t\\t\\t\\taccumulator[key] = value;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (accumulator[key] === undefined) {\\n\\t\\t\\t\\t\\taccumulator[key] = [value];\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taccumulator[key] = [].concat(accumulator[key], value);\\n\\t\\t\\t};\\n\\t\\tdefault:\\n\\t\\t\\treturn (key, value, accumulator) => {\\n\\t\\t\\t\\tif (accumulator[key] === undefined) {\\n\\t\\t\\t\\t\\taccumulator[key] = value;\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taccumulator[key] = [].concat(accumulator[key], value);\\n\\t\\t\\t};\\n\\t}\\n}\\n\\nfunction encode(value, options) {\\n\\tif (options.encode) {\\n\\t\\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\\n\\t}\\n\\n\\treturn value;\\n}\\n\\nfunction decode(value, options) {\\n\\tif (options.decode) {\\n\\t\\treturn decodeComponent(value);\\n\\t}\\n\\n\\treturn value;\\n}\\n\\nfunction keysSorter(input) {\\n\\tif (Array.isArray(input)) {\\n\\t\\treturn input.sort();\\n\\t}\\n\\n\\tif (typeof input === 'object') {\\n\\t\\treturn keysSorter(Object.keys(input))\\n\\t\\t\\t.sort((a, b) => Number(a) - Number(b))\\n\\t\\t\\t.map(key => input[key]);\\n\\t}\\n\\n\\treturn input;\\n}\\n\\nfunction extract(input) {\\n\\tconst queryStart = input.indexOf('?');\\n\\tif (queryStart === -1) {\\n\\t\\treturn '';\\n\\t}\\n\\treturn input.slice(queryStart + 1);\\n}\\n\\nfunction parse(input, options) {\\n\\toptions = Object.assign({decode: true, arrayFormat: 'none'}, options);\\n\\n\\tconst formatter = parserForArrayFormat(options);\\n\\n\\t// Create an object with no prototype\\n\\tconst ret = Object.create(null);\\n\\n\\tif (typeof input !== 'string') {\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tinput = input.trim().replace(/^[?#&]/, '');\\n\\n\\tif (!input) {\\n\\t\\treturn ret;\\n\\t}\\n\\n\\tfor (const param of input.split('&')) {\\n\\t\\tlet [key, value] = param.replace(/\\\\+/g, ' ').split('=');\\n\\n\\t\\t// Missing `=` should be `null`:\\n\\t\\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\\n\\t\\tvalue = value === undefined ? null : decode(value, options);\\n\\n\\t\\tformatter(decode(key, options), value, ret);\\n\\t}\\n\\n\\treturn Object.keys(ret).sort().reduce((result, key) => {\\n\\t\\tconst value = ret[key];\\n\\t\\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\\n\\t\\t\\t// Sort object keys, not values\\n\\t\\t\\tresult[key] = keysSorter(value);\\n\\t\\t} else {\\n\\t\\t\\tresult[key] = value;\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}, Object.create(null));\\n}\\n\\nexports.extract = extract;\\nexports.parse = parse;\\n\\nexports.stringify = (obj, options) => {\\n\\tconst defaults = {\\n\\t\\tencode: true,\\n\\t\\tstrict: true,\\n\\t\\tarrayFormat: 'none'\\n\\t};\\n\\n\\toptions = Object.assign(defaults, options);\\n\\n\\tif (options.sort === false) {\\n\\t\\toptions.sort = () => {};\\n\\t}\\n\\n\\tconst formatter = encoderForArrayFormat(options);\\n\\n\\treturn obj ? Object.keys(obj).sort(options.sort).map(key => {\\n\\t\\tconst value = obj[key];\\n\\n\\t\\tif (value === undefined) {\\n\\t\\t\\treturn '';\\n\\t\\t}\\n\\n\\t\\tif (value === null) {\\n\\t\\t\\treturn encode(key, options);\\n\\t\\t}\\n\\n\\t\\tif (Array.isArray(value)) {\\n\\t\\t\\tconst result = [];\\n\\n\\t\\t\\tfor (const value2 of value.slice()) {\\n\\t\\t\\t\\tif (value2 === undefined) {\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tresult.push(formatter(key, value2, result.length));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn result.join('&');\\n\\t\\t}\\n\\n\\t\\treturn encode(key, options) + '=' + encode(value, options);\\n\\t}).filter(x => x.length > 0).join('&') : '';\\n};\\n\\nexports.parseUrl = (input, options) => {\\n\\treturn {\\n\\t\\turl: input.split('?')[0] || '',\\n\\t\\tquery: parse(extract(input), options)\\n\\t};\\n};\\n\",\"'use strict';\\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\\n\",\"'use strict';\\nvar token = '%[a-f0-9]{2}';\\nvar singleMatcher = new RegExp(token, 'gi');\\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\\n\\nfunction decodeComponents(components, split) {\\n\\ttry {\\n\\t\\t// Try to decode the entire string first\\n\\t\\treturn decodeURIComponent(components.join(''));\\n\\t} catch (err) {\\n\\t\\t// Do nothing\\n\\t}\\n\\n\\tif (components.length === 1) {\\n\\t\\treturn components;\\n\\t}\\n\\n\\tsplit = split || 1;\\n\\n\\t// Split the array in 2 parts\\n\\tvar left = components.slice(0, split);\\n\\tvar right = components.slice(split);\\n\\n\\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\\n}\\n\\nfunction decode(input) {\\n\\ttry {\\n\\t\\treturn decodeURIComponent(input);\\n\\t} catch (err) {\\n\\t\\tvar tokens = input.match(singleMatcher);\\n\\n\\t\\tfor (var i = 1; i < tokens.length; i++) {\\n\\t\\t\\tinput = decodeComponents(tokens, i).join('');\\n\\n\\t\\t\\ttokens = input.match(singleMatcher);\\n\\t\\t}\\n\\n\\t\\treturn input;\\n\\t}\\n}\\n\\nfunction customDecodeURIComponent(input) {\\n\\t// Keep track of all the replacements and prefill the map with the `BOM`\\n\\tvar replaceMap = {\\n\\t\\t'%FE%FF': '\\\\uFFFD\\\\uFFFD',\\n\\t\\t'%FF%FE': '\\\\uFFFD\\\\uFFFD'\\n\\t};\\n\\n\\tvar match = multiMatcher.exec(input);\\n\\twhile (match) {\\n\\t\\ttry {\\n\\t\\t\\t// Decode as big chunks as possible\\n\\t\\t\\treplaceMap[match[0]] = decodeURIComponent(match[0]);\\n\\t\\t} catch (err) {\\n\\t\\t\\tvar result = decode(match[0]);\\n\\n\\t\\t\\tif (result !== match[0]) {\\n\\t\\t\\t\\treplaceMap[match[0]] = result;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tmatch = multiMatcher.exec(input);\\n\\t}\\n\\n\\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\\n\\treplaceMap['%C2'] = '\\\\uFFFD';\\n\\n\\tvar entries = Object.keys(replaceMap);\\n\\n\\tfor (var i = 0; i < entries.length; i++) {\\n\\t\\t// Replace all decoded components\\n\\t\\tvar key = entries[i];\\n\\t\\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\\n\\t}\\n\\n\\treturn input;\\n}\\n\\nmodule.exports = function (encodedURI) {\\n\\tif (typeof encodedURI !== 'string') {\\n\\t\\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\\n\\t}\\n\\n\\ttry {\\n\\t\\tencodedURI = encodedURI.replace(/\\\\+/g, ' ');\\n\\n\\t\\t// Try the built in decoder first\\n\\t\\treturn decodeURIComponent(encodedURI);\\n\\t} catch (err) {\\n\\t\\t// Fallback to a more advanced decoder\\n\\t\\treturn customDecodeURIComponent(encodedURI);\\n\\t}\\n};\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{2025:function(e,t,r){var n=r(28),o=r(2026),a={},c={},s={};function i(e,t,r,n){a[e]||(a[e]=[]),c[e]||(c[e]=[]),a[e].push(t),c[e].push([r,t,new Date(n)]),s[e]||(s[e]={}),s[e][r]||(s[e][r]={deposit:[],withdrawal:[]}),s[e][r][t>0?\"deposit\":\"withdrawal\"].push(t)}function u(e,t,r,n,a,c,s,u,l){return r||(r={amount:\"\",currency:\"\"}),n||(n={amount:\"\",currency:\"\"}),a||(a={amount:\"\",currency:\"\"}),r.amount&&i(r.currency,r.amount,s,c),n.amount&&i(n.currency,-n.amount,s,c),a.amount&&i(a.currency,-a.amount,s,c),e.push([t,o.printAmount(r),r.currency,o.printAmount(n),n.currency,o.printAmount(a),a.currency,\"BTS-DEX\",l||\"\",u||\"\",c]),e}e.exports={parseData:function(e,t,r){var n=[];n.push([\"Type\",\"Buy Amount\",\"Buy Currency\",\"Sell Amount\",\"Sell Currency\",\"Fee Amount\",\"Fee Currency\",\"Exchange\",\"Trade Group\",\"Comment\",\"Date\"]);var a={};function c(e){a[e]||(a[e]=0),a[e]++}var s=Object.keys(e),i=Array.isArray(s),l=0;for(s=i?s:s[Symbol.iterator]();;){var p;if(i){if(l>=s.length)break;p=s[l++]}else{if((l=s.next()).done)break;p=l.value}var f=e[p],d=f.timestamp,m=f.type,y=f.data,_=null;switch(m){case\"vesting_balance_withdraw\":var h=o.parseCurrency(y.amount);_=o.parseCurrency(y.fee),n=u(n,\"1.2.30665\"===y.owner&&h.amount>1e4?\"Income\":\"Deposit\",h,null,_,d,m,r+\" : Vesting balance withdraw\"),c(m);break;case\"balance_claim\":n=u(n,\"Deposit\",o.parseCurrency(y.total_claimed),null,null,d,m,r+\" : Balance claim\"),c(m);break;case\"transfer\":var b=o.parseCurrency(y.amount);_=o.parseCurrency(y.fee),n=y.to==t?u(n,\"1.2.391938\"===y.to&&\"1.2.381086\"===y.from?\"Income\":\"Deposit\",b,null,null,d,m,r+\" : From \"+y.from):u(n,\"Withdrawal\",null,b,_,d,m,r+\": To \"+y.to),c(m);break;case\"fill_order\":var g=o.parseCurrency(y.pays),v=o.parseCurrency(y.receives);\"BTS\"!==(_=o.parseCurrency(y.fee)).currency&&(v.currency===_.currency?(v.amount-=_.amount,_.amount=0):g.currency===_.currency&&(g.amount-=_.amount,_.amount=0)),n=u(n,\"Trade\",v,g,_,d,m),c(m);break;case\"asset_issue\":var w=o.parseCurrency(y.asset_to_issue);_=y.issuer===t?o.parseCurrency(y.fee):null,y.issue_to_account===t&&(n=u(n,\"Deposit\",w,null,_,d,m,r+\" : Issued to account\")),c(m);break;case\"account_update\":case\"proposal_create\":case\"proposal_update\":case\"account_whitelist\":case\"worker_create\":case\"limit_order_create\":case\"limit_order_cancel\":case\"call_order_update\":(_=o.parseCurrency(y.fee)).amount>0&&(n=u(n,\"Withdrawal\",null,_,null,d,m,m+\" fee\"),c(m));break;case\"account_create\":y.registrar===t&&(n=u(n,\"Withdrawal\",null,_=o.parseCurrency(y.fee),null,d,m,m+\" fee\"),c(m));break;case\"asset_fund_fee_pool\":_=o.parseCurrency(y.fee),n=u(n,\"Withdrawal\",null,o.parseCurrency({amount:y.amount,asset_id:\"1.3.0\"}),_,d,m,\"\"+m),c(m);break;default:console.log(\"Unhandled type:\",m,y)}}return n},filterEntries:function(e,t,r){if(!t&&!r)return e;for(var n=Object.keys(e),o=n.length-1;o>=0;o--){var a=n[o],c=e[a],s=c.timestamp,i=c.type;c.data,t&&i!==t?delete e[a]:r&&new Date(s).getTime()<r&&delete e[a]}return console.log(\"Removed \"+(n.length-Object.keys(e).length)+\" entries by filtering\"),e},groupEntries:function(e){for(var t={},r=Object.keys(e),o=r.length-1;o>=0;o--){var a=r[o],c=e[a],s=c.timestamp,i=c.type,u=c.data;switch(i){case\"fill_order\":var l=n(s),p=u.receives.asset_id+\"_\"+u.pays.asset_id,f=t[p],d=f?n(f.timestamp):null;f&&l.isSame(d,\"day\")&&f.data.pays.asset_id===u.pays.asset_id&&f.data.receives.asset_id===u.receives.asset_id&&(u.pays.amount=parseInt(u.pays.amount,10)+parseInt(f.data.pays.amount,10),u.receives.amount=parseInt(u.receives.amount,10)+parseInt(f.data.receives.amount,10),u.fee.amount=parseInt(u.fee.amount,10)+parseInt(f.data.fee.amount,10),e[a].data=u,delete e[f.trx_id]),t[p]={data:u,timestamp:s,trx_id:a}}}return console.log(\"Removed \"+(r.length-Object.keys(e).length)+\" fill_order entries by grouping\"),e}}},2026:function(e,t,r){var n=r(5).ChainStore;e.exports={parseCurrency:function(e){var t=n.getAsset(e.asset_id),r=function(e){if(\"number\"!=typeof e)throw new Error(\"Input must be a number\");return Math.pow(10,e)}((t=t?t.toJS():{precision:5}).precision);return{amount:e.amount/r,currency:t.symbol,asset_id:e.asset_id}},printAmount:function(e){if(!e.amount||!e.currency)return\"\";var t=n.getAsset(e.asset_id);return t=t?t.toJS():{precision:5},e.amount.toFixed(t.precision)},getIndex:function(e){var t=e.split(\".\");return parseInt(t[2],10)}}},2027:function(e,t,r){var n=r(2028),o=r(14),a=r(5),c=a.ChainTypes,s=a.ChainStore,i=a.FetchChain,u=c.operations,l=Object.keys(u),p={},f={};function d(e){return new Promise(function(t,r){if(p[e])return t(p[e]);o.Apis.instance().db_api().exec(\"get_block\",[e]).then(function(r){p[e]=new Date(r.timestamp+\"Z\"),t(p[e])}).catch(r)})}function m(e){return new Promise(function(t,r){var n;if(f[e])return t(f[e]);i(\"getObject\",e,void 0,(n={},n[e]=!1,n)).then(function(r){var n=r.toJS();f[e]={symbol:n.symbol.replace(/OPEN\\.|BRIDGE\\.|RUDEX\\.|GDEX\\.|BLOCK\\./,\"\"),precision:n.precision},t(f[e])}).catch(function(e){r()})})}e.exports={connect:function(){return new Promise(function(e){o.Apis.instance(n.apiNode,!0).init_promise.then(function(t){s.init(!1).then(function(){e(t)})}).catch(function(e){console.error(\"Error connection to node:\",e)})})},disconnect:function(){o.Apis.instance().close()},getUser:function(e){return new Promise(function(t,r){var n;i(\"getAccount\",e,void 0,(n={},n[e]=!1,n)).then(function(e){var r=e.toJS();r.balances||(r.balances={}),r.call_orders||(r.call_orders=[]);var n=Object.keys(r.balances);t({accountId:r.id,assets:n,balances:r.balances})}).catch(r)})},getBlockTime:d,getAssetData:m,resolveAssets:function(e,t){return new Promise(function(r,n){var o=[],a={};e&&e.forEach(function(e){switch(l[e.op[0]]){case\"transfer\":a[e.op[1].amount.asset_id]=!0,a[e.op[1].fee.asset_id]=!0;break;case\"fill_order\":a[e.op[1].pays.asset_id]=!0,a[e.op[1].receives.asset_id]=!0,a[e.op[1].fee.asset_id]=!0;break;case\"asset_issue\":a[e.op[1].asset_to_issue.asset_id]=!0,a[e.op[1].fee.asset_id]=!0}}),t&&t.forEach(function(e){a[e]=!0}),Object.keys(a).forEach(function(e){!f[e]&&e&&o.push(m(e))}),Promise.all(o).then(r).catch(n)})},resolveBlockTimes:function(e){return new Promise(function(t,r){var n=e.map(function(e){return e.block_time&&(p[e.block_num]=new Date(e.block_time)),d(e.block_num)});Promise.all(n).then(t).catch(r)})},getAsset:function(e){return f[e]},getBlock:function(e){return p[e]}}},2028:function(e,t){e.exports={apiNode:\"wss://eu.nodes.bitshares.ws\",useES:!0,esNode:\"https://eswrapper.bitshares.eu\",botPaymentAccounts:[]}},2029:function(e,t,r){var n=r(14),o=void 0;e.exports=function(e){return o=e?fetch:r(2030),{getAccountHistory:function(e,t,r,o){return new Promise(function(a,c){n.Apis.instance().history_api().exec(\"get_account_history\",[e,t,r,o]).then(function(e){a(e)}).catch(c)})},getAccountHistoryES:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:\"https://eswrapper.bitshares.eu\";return console.log(\"query\",n+\"/get_account_history?account_id=\"+e+\"&from_=\"+r+\"&size=\"+t+\"&sort_by=block_data.block_time&type=data&agg_field=operation_type\"),new Promise(function(a,c){o(n+\"/get_account_history?account_id=\"+e+\"&from_=\"+r+\"&size=\"+t+\"&sort_by=block_data.block_time&type=data&agg_field=operation_type\").then(function(e){return e.json()}).then(function(e){var t=e.map(function(e){return{id:e.account_history.operation_id,op:JSON.parse(e.operation_history.op),result:JSON.parse(e.operation_history.operation_result),block_num:e.block_data.block_num,block_time:e.block_data.block_time+\"Z\"}});a(t)}).catch(function(){a([])})})}}}},2030:function(e,t){},2036:function(e,t,r){var n=r(2025),o=n.groupEntries,a=n.parseData,c=r(2027),s=c.resolveBlockTimes,i=c.resolveAssets,u=r(2029)(!0),l=u.getAccountHistoryES,p=u.getAccountHistory;e.exports={groupEntries:o,parseData:a,getAccountHistoryES:l,getAccountHistory:p,resolveBlockTimes:s,resolveAssets:i}},2191:function(e,t,r){\"use strict\";const n=r(2192),o=r(2193);function a(e,t){return t.encode?t.strict?n(e):encodeURIComponent(e):e}function c(e,t){return t.decode?o(e):e}function s(e){const t=e.indexOf(\"?\");return-1===t?\"\":e.slice(t+1)}function i(e,t){const r=function(e){let t;switch(e.arrayFormat){case\"index\":return(e,r,n)=>{t=/\\[(\\d*)\\]$/.exec(e),e=e.replace(/\\[\\d*\\]$/,\"\"),t?(void 0===n[e]&&(n[e]={}),n[e][t[1]]=r):n[e]=r};case\"bracket\":return(e,r,n)=>{t=/(\\[\\])$/.exec(e),e=e.replace(/\\[\\]$/,\"\"),t?void 0!==n[e]?n[e]=[].concat(n[e],r):n[e]=[r]:n[e]=r};default:return(e,t,r)=>{void 0!==r[e]?r[e]=[].concat(r[e],t):r[e]=t}}}(t=Object.assign({decode:!0,arrayFormat:\"none\"},t)),n=Object.create(null);if(\"string\"!=typeof e)return n;if(!(e=e.trim().replace(/^[?#&]/,\"\")))return n;for(const o of e.split(\"&\")){let[e,a]=o.replace(/\\+/g,\" \").split(\"=\");a=void 0===a?null:c(a,t),r(c(e,t),a,n)}return Object.keys(n).sort().reduce((e,t)=>{const r=n[t];return Boolean(r)&&\"object\"==typeof r&&!Array.isArray(r)?e[t]=function e(t){return Array.isArray(t)?t.sort():\"object\"==typeof t?e(Object.keys(t)).sort((e,t)=>Number(e)-Number(t)).map(e=>t[e]):t}(r):e[t]=r,e},Object.create(null))}t.extract=s,t.parse=i,t.stringify=((e,t)=>{!1===(t=Object.assign({encode:!0,strict:!0,arrayFormat:\"none\"},t)).sort&&(t.sort=(()=>{}));const r=function(e){switch(e.arrayFormat){case\"index\":return(t,r,n)=>null===r?[a(t,e),\"[\",n,\"]\"].join(\"\"):[a(t,e),\"[\",a(n,e),\"]=\",a(r,e)].join(\"\");case\"bracket\":return(t,r)=>null===r?[a(t,e),\"[]\"].join(\"\"):[a(t,e),\"[]=\",a(r,e)].join(\"\");default:return(t,r)=>null===r?a(t,e):[a(t,e),\"=\",a(r,e)].join(\"\")}}(t);return e?Object.keys(e).sort(t.sort).map(n=>{const o=e[n];if(void 0===o)return\"\";if(null===o)return a(n,t);if(Array.isArray(o)){const e=[];for(const t of o.slice())void 0!==t&&e.push(r(n,t,e.length));return e.join(\"&\")}return a(n,t)+\"=\"+a(o,t)}).filter(e=>e.length>0).join(\"&\"):\"\"}),t.parseUrl=((e,t)=>({url:e.split(\"?\")[0]||\"\",query:i(s(e),t)}))},2192:function(e,t,r){\"use strict\";e.exports=(e=>encodeURIComponent(e).replace(/[!'()*]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`))},2193:function(e,t,r){\"use strict\";var n=new RegExp(\"%[a-f0-9]{2}\",\"gi\"),o=new RegExp(\"(%[a-f0-9]{2})+\",\"gi\");function a(e,t){try{return decodeURIComponent(e.join(\"\"))}catch(e){}if(1===e.length)return e;t=t||1;var r=e.slice(0,t),n=e.slice(t);return Array.prototype.concat.call([],a(r),a(n))}function c(e){try{return decodeURIComponent(e)}catch(o){for(var t=e.match(n),r=1;r<t.length;r++)t=(e=a(t,r).join(\"\")).match(n);return e}}e.exports=function(e){if(\"string\"!=typeof e)throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\"+typeof e+\"`\");try{return e=e.replace(/\\+/g,\" \"),decodeURIComponent(e)}catch(t){return function(e){for(var t={\"%FE%FF\":\"��\",\"%FF%FE\":\"��\"},r=o.exec(e);r;){try{t[r[0]]=decodeURIComponent(r[0])}catch(e){var n=c(r[0]);n!==r[0]&&(t[r[0]]=n)}r=o.exec(e)}t[\"%C2\"]=\"�\";for(var a=Object.keys(t),s=0;s<a.length;s++){var i=a[s];e=e.replace(new RegExp(i,\"g\"),t[i])}return e}(e)}}}}]);","extractedComments":[]}